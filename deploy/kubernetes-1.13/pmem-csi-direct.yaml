apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-service-account-controller
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csi-cluster-role-controller
rules:
- apiGroups: [ "" ]
  resources: [ "persistentvolumes" ]
  #attacher:     {get, list, watch, update}
  #provsisioner: {get, list, watch, create, delete}
  verbs: [ "create", "delete", "get", "list", "watch", "update" ]
- apiGroups: [ "" ]
  resources: [ "secrets" ] #provisioner
  verbs: [ "get", "list" ]
- apiGroups: [ "" ]
  resources: [ "persistentvolumeclaims" ] #provisioner
  verbs: [ "get", "list", "watch", "update" ]
- apiGroups: [ "storage.k8s.io" ]
  resources: [ "storageclasses" ] #provisioner
  verbs: [ "get", "list", "watch" ] 
- apiGroups: [ "" ]
  resources: [ "events" ] #provisioner, #driver-registrar
  verbs: [ "get", "list", "watch", "create", "update", "patch" ]
- apiGroups: [ "" ]
  resources: [ "nodes" ] #attacher
  verbs: [ "get", "list", "watch" ]
- apiGroups: [ "storage.k8s.io" ]
  resources: [ "volumeattachments" ] #attacher 
  verbs: [ "get", "list", "watch", "update" ]
- apiGroups: [ "csi.storage.k8s.io" ]
  resources: [ "csinodeinfos" ] # attacher - {get, list, watch}
  verbs: [ "get", "list", "watch" ]
- apiGroups: [ "csi.storage.k8s.io" ]
  resources: [ "csidrivers" ] # driver-registrar
  verbs: [ "create", "delete" ]
# NOTE: cluster-driver-registrar v1.0.1 RBAC rules are broken and does not list
# customresourcedefinitions in its RBAC rules:
# https://github.com/kubernetes-csi/cluster-driver-registrar/blob/v1.0.1/deploy/kubernetes/rbac.yaml
# but the driver-registrar tries to create CSIDriverCRD, that requires below
# rule, which shall be removed when we move to later cluster-driver-registrar
# releases
- apiGroups: [ "apiextensions.k8s.io" ]
  resources: [ "customresourcedefinitions" ]
  verbs: [ "create", "update", "watch" ] #driver-registrar
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: csi-role-binding-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csi-cluster-role-controller
subjects:
- kind: ServiceAccount
  name: csi-service-account-controller
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-service-account-node
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csi-cluster-role-node
rules:
- apiGroups: [ "" ]
  resources: [ "events" ] #driver-registrar
  verbs: [ "get", "list", "watch", "create", "update", "patch" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: csi-role-binding-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csi-cluster-role-node
subjects:
- kind: ServiceAccount
  name: csi-service-account-node
  namespace: default
---

apiVersion: v1
kind: Service
metadata:
  name: pmem-controller
spec:
  selector:
    app: pmem-csi-controller
  ports:
  - port: 10000
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pmem-csi-controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pmem-csi-controller
  serviceName: pmem-controller
  template:
    metadata:
      labels:
        app: pmem-csi-controller
    spec:
      serviceAccount: csi-service-account-controller
      containers:
      - name: driver-registrar
        imagePullPolicy: Always
        image: quay.io/k8scsi/csi-cluster-driver-registrar:v1.0.1
        args: [ "--v=5",
            "--driver-requires-attachment=true",
            "--pod-info-mount-version=v1",
            "--csi-address=/csi/csi-controller.sock" ]
        volumeMounts:
        - name: plugin-socket-dir
          mountPath: /csi
        ## external-provisioner:
        #    Watches PVClaim objects and triggers Create/DeleteVolume
      - name: external-provisioner
        imagePullPolicy: Always
        image: quay.io/k8scsi/csi-provisioner:v1.0.1
        args: [ "--v=5", "--provisioner=pmem-csi.intel.com", "--csi-address=/csi/csi-controller.sock", "--feature-gates=Topology=true" ]
        volumeMounts:
        - name: plugin-socket-dir
          mountPath: /csi
        ## external-attacher: sidecar
        #    Watches VolumeAttachment objects and triggers
        #    ControllerPublish/Unpublish
      - name: external-attacher
        imagePullPolicy: Always
        image: quay.io/k8scsi/csi-attacher:v1.0.1
        args: [ "--v=5", "--csi-address=/csi/csi-controller.sock" ]
        volumeMounts:
        - name: plugin-socket-dir
          mountPath: /csi
      - name: pmem-driver
        image: 192.168.8.1:5000/pmem-csi-driver:canary
        imagePullPolicy: Always
        terminationMessagePath: /tmp/termination-log
        args:  [ "-v=5",
                 "-drivername=pmem-csi.intel.com",
                 "-mode=controller",
                 "-deviceManager=ndctl",
                 "-endpoint=unix:///csi/csi-controller.sock",
                 "-registryEndpoint=tcp://0.0.0.0:10000",
                 "-nodeid=$(KUBE_NODE_NAME)",
                 "-caFile=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                 "-certFile=/certs/pmem-registry.crt",
                 "-keyFile=/certs/pmem-registry.key"
               ]
        volumeMounts:
        - name: registry-cert
          mountPath: /certs/
        - name: plugin-socket-dir
          mountPath: /csi
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        securityContext:
          privileged: true
      volumes:
      - name: plugin-socket-dir
        emptyDir:
      - name: registry-cert
        secret:
          secretName: pmem-registry-secrets
          items:
          - key: tls.crt
            path: pmem-registry.crt
          - key: tls.key
            path: pmem-registry.key
---
kind: DaemonSet
apiVersion: apps/v1beta2
metadata:
  name: pmem-csi
spec:
  selector:
    matchLabels:
      app: pmem-csi
  template:
    metadata:
      labels:
        app: pmem-csi
    spec:
      serviceAccount: csi-service-account-node
      nodeSelector:
        storage: pmem
      hostNetwork: true
      initContainers:
      containers:
        ## driver-registrar:
        # Registers the CSI driver with kubelet adds the driver's custom nodeId
      - name: driver-registrar
        imagePullPolicy: Always
        image: quay.io/k8scsi/csi-node-driver-registrar:v1.0.2
        args: [ "--v=5",
            "--kubelet-registration-path=/var/lib/kubelet/plugins/pmem-csi.intel.com/csi.sock",
            "--csi-address=/csi/csi.sock" ]
        volumeMounts:
        - name: plugin-socket-dir
          mountPath: /csi
        - name: registration-dir
          mountPath: /registration
        ## pmem-driver:
        #
      - name: pmem-driver
        imagePullPolicy: Always
        image: 192.168.8.1:5000/pmem-csi-driver:canary
        terminationMessagePath: /tmp/termination-log
        args: [ "-v=5",
                  "-drivername=pmem-csi.intel.com",
                  "-mode=node",
                  "-deviceManager=ndctl", 
                  "-endpoint=$(CSI_ENDPOINT)",
                  "-nodeid=$(KUBE_NODE_NAME)",
                  "-controllerEndpoint=tcp://$(KUBE_POD_IP):10001",
                  "-registryEndpoint=$(PMEM_CONTROLLER_PORT_10000_TCP)",
                  "-caFile=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                  "-certFile=/certs/$(KUBE_NODE_NAME).crt",
                  "-keyFile=/certs/$(KUBE_NODE_NAME).key"
              ]
        securityContext:
          privileged: true
        env:
        - name: CSI_ENDPOINT
          value: unix:///csi/csi.sock
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: KUBE_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        volumeMounts:
        - name: plugin-socket-dir
          mountPath: /csi
        - name: mountpoint-dir
          mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi
          mountPropagation: Bidirectional
        - name: pods-dir
          mountPath: /var/lib/kubelet/pods
          mountPropagation: Bidirectional
        - name: registry-cert
          mountPath: /certs/
        - name: dev-dir
          mountPath: /dev
        - name: sys-dir
          mountPath: /sys
      volumes:
        - name: plugin-socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/pmem-csi.intel.com/
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/csi
            type: DirectoryOrCreate
        - name: pods-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
        - name: registry-cert
          secret:
            secretName: pmem-node-secrets
        - name: dev-dir
          hostPath:
            path: /dev
            type: DirectoryOrCreate
        - name: sys-dir
          hostPath:
            path: /sys
            type: DirectoryOrCreate
