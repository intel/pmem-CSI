# Deploys the pmem-csi driver onto exactly one node, running in unified mode.
# That CSI driver gets exposed with a NodePort service.

apiVersion: v1
kind: Service
metadata:
  name: pmem-unified
spec:
  type: NodePort
  selector:
    app: pmem-csi-unified
  ports:
  - port: 10000
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pmem-csi-unified
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pmem-csi-unified
  serviceName: pmem-csi-unified
  template:
    metadata:
      labels:
        app: pmem-csi-unified
    spec:
      initContainers:
      - name: pmem-ns-init
        imagePullPolicy: Always
        image: 192.168.8.1:5000/pmem-ns-init:canary
        args: [ "-v=5", "-namespacesize=9" ]
        securityContext:
          privileged: true
      - name: pmem-vgm
        imagePullPolicy: Always
        image: 192.168.8.1:5000/pmem-vgm:canary
        args: [ "-v=5" ]
        securityContext:
          privileged: true
      containers:
      - name: pmem-driver
        image: 192.168.8.1:5000/pmem-csi-driver:canary
        imagePullPolicy: Always
        args:  [ "-v=5",
                 "-drivername=pmem-csi.intel.com",
                 "-mode=unified",
                 "-endpoint=$(CSI_ENDPOINT)",
                 "-nodeid=$(KUBE_NODE_NAME)" ]
        env:
        - name: CSI_ENDPOINT
          value: "tcp://0.0.0.0:10000"
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        securityContext:
          privileged: true
        volumeMounts:
          # We create temporary staging and target directories under /var/tmp
          # during csi-sanity testing and must have those visible inside the
          # container (see test/e2e/storage/sanity.go).
          - name: var-tmp
            mountPath: /var/tmp
      volumes:
        - name: var-tmp
          hostPath:
            path: /var/tmp
            type: DirectoryOrCreate
