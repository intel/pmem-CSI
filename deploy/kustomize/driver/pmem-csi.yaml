apiVersion: v1
kind: ServiceAccount
metadata:
  name: pmem-csi-intel-com-controller
  namespace: default
---
# This role binding corresponds to what the following command creates:
# oc adm policy add-scc-to-user privileged -z pmem-csi-intel-com-controller
#
# One difference is that we don't use the name system:openshift:scc:privileged
# for the object. That object is managed by oc and the admin, whereas this
# one here is under control of PMEM-CSI (YAML or operator).
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pmem-csi-intel-com-node-openshift-cfg
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:openshift:scc:privileged
subjects:
- kind: ServiceAccount
  name: pmem-csi-intel-com-controller
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pmem-csi-intel-com-webhooks
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pmem-csi-intel-com-webhooks-cfg
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pmem-csi-intel-com-webhooks-runner
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
  - patch
  - update
  - create
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses # for scheduler extension
  - csinodes # for rescheduler
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pmem-csi-intel-com-webhooks-role-cfg
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pmem-csi-intel-com-webhooks-cfg
subjects:
- kind: ServiceAccount
  name: pmem-csi-intel-com-webhooks
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pmem-csi-intel-com-webhooks-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pmem-csi-intel-com-webhooks-runner
subjects:
- kind: ServiceAccount
  name: pmem-csi-intel-com-webhooks
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pmem-csi-intel-com-controller
  namespace: default
  labels:
    app.kubernetes.io/name: pmem-csi-controller
    app.kubernetes.io/part-of: pmem-csi
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: pmem-csi.intel.com
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pmem-csi-controller
      app.kubernetes.io/instance: pmem-csi.intel.com
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pmem-csi-controller
        app.kubernetes.io/part-of: pmem-csi
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: pmem-csi.intel.com
        pmem-csi.intel.com/webhook: ignore
    spec:
      serviceAccountName: pmem-csi-intel-com-webhooks
      # Allow this pod to run on all nodes and
      # prevent eviction (https://github.com/kubernetes-csi/csi-driver-host-path/issues/47#issuecomment-538469081).
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      priorityClassName: system-cluster-critical
      containers:
      - name: pmem-driver
        image: intel/pmem-csi-driver:canary
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/pmem-csi-driver
        - -v=3
        - -logging-format=text
        - -mode=webhooks
        - -drivername=$(PMEM_CSI_DRIVER_NAME)
        - -nodeSelector={"storage":"pmem"}
        # ca.crt is present in pmem-csi-intel-com-controller-secret but not required for anything at
        # the moment.
        - -caFile=
        - -certFile=/certs/tls.crt
        - -keyFile=/certs/tls.key
        - -schedulerListen=:8000
        securityContext:
          readOnlyRootFilesystem: true
        resources:
          requests:
            memory: 128Mi
            cpu: 12m
        terminationMessagePath: /dev/termination-log
        volumeMounts:
        - name: webhook-cert
          mountPath: /certs
        env:
        - name: TERMINATION_LOG_PATH
          value: /dev/termination-log
        - name: PMEM_CSI_DRIVER_NAME
          value: pmem-csi.intel.com
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      volumes:
      - name: webhook-cert
        secret:
          secretName: pmem-csi-intel-com-controller-secret
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: pmem-csi-intel-com-node
  namespace: default
  labels:
    app.kubernetes.io/name: pmem-csi-node
    app.kubernetes.io/part-of: pmem-csi
    app.kubernetes.io/component: node
    app.kubernetes.io/instance: pmem-csi.intel.com
spec:
  selector:
    matchLabels:
        app.kubernetes.io/name: pmem-csi-node
        app.kubernetes.io/instance: pmem-csi.intel.com
  updateStrategy:
    # These are the defaults, added here explicitly to show that we use them.
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pmem-csi-node
        app.kubernetes.io/part-of: pmem-csi
        app.kubernetes.io/component: node
        app.kubernetes.io/instance: pmem-csi.intel.com
        pmem-csi.intel.com/webhook: ignore
    spec:
      serviceAccountName: pmem-csi-intel-com-controller
      # Allow this pod to run on all nodes and
      # prevent eviction (https://github.com/kubernetes-csi/csi-driver-host-path/issues/47#issuecomment-538469081).
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      priorityClassName: system-node-critical
      nodeSelector:
        storage: pmem
      containers:
      - name: pmem-driver
        image: intel/pmem-csi-driver:canary
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/pmem-csi-driver
        - -v=3
        - -logging-format=text
        - -mode=node
        - -endpoint=unix:///csi/csi.sock
        - -nodeid=$(KUBE_NODE_NAME)
        - -statePath=/var/lib/$(PMEM_CSI_DRIVER_NAME)
        - -drivername=$(PMEM_CSI_DRIVER_NAME)
        - -pmemPercentage=100
        # Passing /dev to container may cause container creation error because
        # termination-log is located on /dev/ by default, re-locate to /tmp
        terminationMessagePath: /tmp/termination-log
        securityContext:
          privileged: true
          runAsUser: 0
        resources:
          requests:
            memory: 250Mi
            cpu: 100m
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: PMEM_CSI_DRIVER_NAME
          value: pmem-csi.intel.com
        - name: TERMINATION_LOG_PATH
          value: /tmp/termination-log
        volumeMounts:
        - name: mountpoint-dir
          mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi
          mountPropagation: Bidirectional
        - name: pods-dir
          mountPath: /var/lib/kubelet/pods
          mountPropagation: Bidirectional
        - name : dev-dir
          mountPath: /dev
        - name: sys-dir
          mountPath: /sys
        # We also mount the host's /sys into the container under a different path
        # than /sys because on OpenShift 4.5, the mount at /sys became read-only:
        # - https://github.com/intel/pmem-csi/issues/786
        # - https://github.com/containerd/containerd/issues/3221
        #
        # The pmem-csi-driver binary will bind-mount /host-sys onto /sys
        # when it detects that problem to ensure that libndctl works without
        # modifications.
        - name: sys-dir
          mountPath: /host-sys
        - name: socket-dir
          mountPath: /csi
        - name: pmem-state-dir
          # This must be the same path as on the host, otherwise
          # Kata Containers cannot find the file that gets attached
          # to a loop device because the name is the same inside
          # and outside the container.
          mountPath: /var/lib/pmem-csi.intel.com
          # Needed for Kata Containers: we mount the PMEM volume inside our
          # state dir and want that to be visible also on the host, because
          # the host will need access to the image file that we create inside
          # that mounted fs.
          mountPropagation: Bidirectional
      - name: driver-registrar
        image: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.2.0
        imagePullPolicy: IfNotPresent
        args:
        - -v=3
        - --kubelet-registration-path=/var/lib/kubelet/plugins/$(PMEM_CSI_DRIVER_NAME)/csi.sock
        - --csi-address=/csi/csi.sock
        - --timeout=10s # avoids unlikely test flakes, default is 1s
        securityContext:
          readOnlyRootFilesystem: true
        resources:
          requests:
            memory: 128Mi
            cpu: 12m
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
        - name: registration-dir
          # node-driver-registrar uses /registration (hard-coded path in the source)
          # to keep its listening socket. The corresponding host path is set below
          # for the volume.
          mountPath: /registration
        env:
        - name: PMEM_CSI_DRIVER_NAME
          value: pmem-csi.intel.com
      - name: external-provisioner
        image: k8s.gcr.io/sig-storage/csi-provisioner:v2.2.2
        imagePullPolicy: IfNotPresent
        args:
        - -v=3
        - --csi-address=/csi/csi.sock
        - --feature-gates=Topology=true
        - --node-deployment=true
        - --strict-topology=true
        - --immediate-topology=false
        - --timeout=5m
        - --default-fstype=ext4 # see https://github.com/kubernetes-csi/external-provisioner/issues/328#issuecomment-714801581
        - --worker-threads=5 # We don't need much concurrency inside a node.
        securityContext:
          readOnlyRootFilesystem: true
        resources:
          requests:
            memory: 128Mi
            cpu: 12m
        volumeMounts:
        - name: socket-dir
          mountPath: /csi
        env:
        # Needed by external-provisioner when using --node-deployment.
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
      volumes:
        - name: socket-dir
          hostPath:
            # This directory has to be under /var/lib/kubelet/plugins to
            # work on OpenShift 4.5 with SELinux enabled. When
            # we were using /var/lib/pmem-csi.intel.com, node-driver-registrar
            # could not connect. Disabling SELinux made a difference, but
            # the exact root cause was not determined.
            #
            # The last path component must match PMEM_CSI_DRIVER_NAME.
            # To simplify updating it via kustomize+JSON patch, the volume
            # is intentionally listed first.
            path: /var/lib/kubelet/plugins/pmem-csi.intel.com
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            # This is where kubelet expects registration sockets for plugins.
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/csi
            type: DirectoryOrCreate
        - name: pods-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
        - name: pmem-state-dir
          hostPath:
            # This state directory must always be the same, regardless of the CSI driver name,
            # because we want to pick up old volumes even when the driver name gets changed.
            path: /var/lib/pmem-csi.intel.com
            type: DirectoryOrCreate
        - name: dev-dir
          hostPath:
            path: /dev
            type: DirectoryOrCreate
        - name: sys-dir
          hostPath:
            path: /sys
            type: DirectoryOrCreate
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pmem-csi-intel-com-node-setup
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pmem-csi-intel-com-node-setup-runner
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pmem-csi-intel-com-node-setup-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pmem-csi-intel-com-node-setup-runner
subjects:
- kind: ServiceAccount
  name: pmem-csi-intel-com-node-setup
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: pmem-csi-intel-com-node-setup
  namespace: default
  labels:
    app.kubernetes.io/name: pmem-csi-node-setup
    app.kubernetes.io/part-of: pmem-csi
    app.kubernetes.io/component: node-setup
    app.kubernetes.io/instance: pmem-csi.intel.com
spec:
  selector:
    matchLabels:
        app.kubernetes.io/name: pmem-csi-node-setup
        app.kubernetes.io/instance: pmem-csi.intel.com
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pmem-csi-node-setup
        app.kubernetes.io/part-of: pmem-csi
        app.kubernetes.io/component: node-setup
        app.kubernetes.io/instance: pmem-csi.intel.com
        pmem-csi.intel.com/webhook: ignore
    spec:
      serviceAccountName: pmem-csi-intel-com-node-setup
      # Allow this pod to run on all nodes.
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      nodeSelector:
        pmem-csi.intel.com/convert-raw-namespaces: force
      containers:
      - name: pmem-driver
        image: intel/pmem-csi-driver:canary
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/pmem-csi-driver
        - -v=3
        - -logging-format=text
        - -mode=force-convert-raw-namespaces
        - '-nodeSelector={"storage":"pmem"}'
        - -nodeid=$(KUBE_NODE_NAME)
        # Passing /dev to container may cause container creation error because
        # termination-log is located on /dev/ by default, re-locate to /tmp
        terminationMessagePath: /tmp/termination-log
        securityContext:
          privileged: true
          runAsUser: 0
        env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: TERMINATION_LOG_PATH
          value: /tmp/termination-log
        volumeMounts:
        - name : dev-dir
          mountPath: /dev
        - name: sys-dir
          mountPath: /sys
        - name: sys-dir
          mountPath: /host-sys
      volumes:
        - name: dev-dir
          hostPath:
            path: /dev
            type: DirectoryOrCreate
        - name: sys-dir
          hostPath:
            path: /sys
            type: DirectoryOrCreate
